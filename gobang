<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>霓虹五子棋</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
        
        :root {
            --neon-blue: #0ff0fc;
            --neon-pink: #ff00ff;
            --neon-purple: #9467fd;
            --neon-green: #00ff7f;
        }
        
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #0a0a1a;
            color: white;
            overflow-x: hidden;
        }
        
        .neon-text-blue {
            color: var(--neon-blue);
            text-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue), 0 0 20px var(--neon-blue);
        }
        
        .neon-text-pink {
            color: var(--neon-pink);
            text-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink), 0 0 20px var(--neon-pink);
        }
        
        .neon-border-blue {
            border: 2px solid var(--neon-blue);
            box-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue), inset 0 0 5px var(--neon-blue);
        }
        
        .neon-border-pink {
            border: 2px solid var(--neon-pink);
            box-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink), inset 0 0 5px var(--neon-pink);
        }
        
        .neon-border-purple {
            border: 2px solid var(--neon-purple);
            box-shadow: 0 0 5px var(--neon-purple), 0 0 10px var(--neon-purple), inset 0 0 5px var(--neon-purple);
        }
        
        .neon-border-green {
            border: 2px solid var(--neon-green);
            box-shadow: 0 0 5px var(--neon-green), 0 0 10px var(--neon-green), inset 0 0 5px var(--neon-green);
        }
        
        .neon-btn-blue {
            background-color: transparent;
            color: var(--neon-blue);
            border: 2px solid var(--neon-blue);
            box-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue);
            transition: all 0.3s;
        }
        
        .neon-btn-blue:hover {
            background-color: var(--neon-blue);
            color: #0a0a1a;
            box-shadow: 0 0 10px var(--neon-blue), 0 0 20px var(--neon-blue), 0 0 30px var(--neon-blue);
        }
        
        .neon-btn-pink {
            background-color: transparent;
            color: var(--neon-pink);
            border: 2px solid var(--neon-pink);
            box-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink);
            transition: all 0.3s;
        }
        
        .neon-btn-pink:hover {
            background-color: var(--neon-pink);
            color: #0a0a1a;
            box-shadow: 0 0 10px var(--neon-pink), 0 0 20px var(--neon-pink), 0 0 30px var(--neon-pink);
        }
        
        .board {
            background-color: rgba(10, 10, 26, 0.7);
            position: relative;
        }
        
        .grid-line {
            position: absolute;
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .piece {
            position: absolute;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s;
        }
        
        .black-piece {
            background: radial-gradient(circle at 30% 30%, #555, #000);
            box-shadow: 0 0 10px #000, inset 0 0 5px #333;
        }
        
        .white-piece {
            background: radial-gradient(circle at 30% 30%, #fff, #ddd);
            box-shadow: 0 0 10px #fff, inset 0 0 5px #aaa;
        }
        
        .black-piece.neon {
            box-shadow: 0 0 10px #000, 0 0 20px var(--neon-blue), inset 0 0 5px #333;
        }
        
        .white-piece.neon {
            box-shadow: 0 0 10px #fff, 0 0 20px var(--neon-pink), inset 0 0 5px #aaa;
        }
        
        .last-move {
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { transform: translate(-50%, -50%) scale(1); }
            50% { transform: translate(-50%, -50%) scale(1.1); }
            100% { transform: translate(-50%, -50%) scale(1); }
        }
        
        .win-line {
            position: absolute;
            background-color: var(--neon-green);
            box-shadow: 0 0 5px var(--neon-green), 0 0 10px var(--neon-green);
            transform-origin: 0 0;
            z-index: 10;
        }
        
        .glow {
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1), transparent 70%);
            pointer-events: none;
            z-index: -1;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background-color: #0a0a1a;
            padding: 2rem;
            border-radius: 10px;
            max-width: 500px;
            width: 90%;
            text-align: center;
            position: relative;
        }
        
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        .radio-container {
            display: flex;
            justify-content: center;
            margin: 1rem 0;
        }
        
        .radio-option {
            margin: 0 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        input[type="radio"] {
            appearance: none;
            width: 20px;
            height: 20px;
            border: 2px solid var(--neon-blue);
            border-radius: 50%;
            margin-bottom: 0.5rem;
            cursor: pointer;
            position: relative;
        }
        
        input[type="radio"]:checked::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 12px;
            height: 12px;
            background-color: var(--neon-blue);
            border-radius: 50%;
            box-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue);
        }
        
        .difficulty-selector {
            margin: 1rem 0;
        }
        
        select {
            background-color: #0a0a1a;
            color: white;
            border: 2px solid var(--neon-purple);
            padding: 0.5rem;
            font-family: 'Press Start 2P', cursive;
            font-size: 0.8rem;
            box-shadow: 0 0 5px var(--neon-purple);
        }
        
        .game-mode-btn {
            margin: 0.5rem;
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }
        
        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }
        
        .player-info {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.5rem 1rem;
            border-radius: 5px;
        }
        
        .active-player {
            animation: glow-pulse 2s infinite;
        }
        
        @keyframes glow-pulse {
            0% { box-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue); }
            50% { box-shadow: 0 0 10px var(--neon-blue), 0 0 20px var(--neon-blue); }
            100% { box-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue); }
        }
        
        .active-player.white {
            animation: glow-pulse-white 2s infinite;
        }
        
        @keyframes glow-pulse-white {
            0% { box-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink); }
            50% { box-shadow: 0 0 10px var(--neon-pink), 0 0 20px var(--neon-pink); }
            100% { box-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink); }
        }
        
        .controls {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
        }
        
        .control-btn {
            margin: 0 0.5rem;
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center p-4">
    <div class="glow"></div>
    
    <h1 class="text-3xl md:text-4xl mb-6 neon-text-blue">霓虹五子棋</h1>
    
    <div class="game-info w-full max-w-md mb-4">
        <div id="black-player" class="player-info neon-border-blue">
            <span class="neon-text-blue">黑棋</span>
            <span id="black-name" class="text-sm">玩家</span>
        </div>
        <div class="flex items-center">
            <span id="game-status" class="neon-text-purple">准备开始</span>
        </div>
        <div id="white-player" class="player-info neon-border-pink">
            <span class="neon-text-pink">白棋</span>
            <span id="white-name" class="text-sm">AI</span>
        </div>
    </div>
    
    <div class="board relative w-full max-w-md h-96 md:h-[28rem] neon-border-purple mb-4">
        <!-- 棋盘和棋子将通过JavaScript动态生成 -->
    </div>
    
    <div class="controls">
        <button id="new-game-btn" class="neon-btn-blue control-btn">
            <i class="fas fa-plus mr-2"></i>新游戏
        </button>
        <button id="undo-btn" class="neon-btn-purple control-btn" disabled>
            <i class="fas fa-undo mr-2"></i>悔棋
        </button>
        <button id="settings-btn" class="neon-btn-pink control-btn">
            <i class="fas fa-cog mr-2"></i>设置
        </button>
    </div>
    
    <!-- 设置模态框 -->
    <div id="settings-modal" class="modal">
        <div class="modal-content neon-border-green">
            <span class="close-btn neon-text-pink">&times;</span>
            <h2 class="neon-text-green mb-4">游戏设置</h2>
            
            <div class="mb-6">
                <h3 class="neon-text-blue mb-2">游戏模式</h3>
                <div class="flex justify-center">
                    <button id="pvp-mode" class="neon-btn-blue game-mode-btn">玩家 vs 玩家</button>
                    <button id="pvc-mode" class="neon-btn-pink game-mode-btn">玩家 vs AI</button>
                </div>
            </div>
            
            <div id="ai-settings" class="mb-6">
                <h3 class="neon-text-blue mb-2">AI设置</h3>
                <div class="radio-container">
                    <div class="radio-option">
                        <input type="radio" id="first-move" name="move-order" value="first" checked>
                        <label for="first-move" class="neon-text-blue text-sm">先手</label>
                    </div>
                    <div class="radio-option">
                        <input type="radio" id="second-move" name="move-order" value="second">
                        <label for="second-move" class="neon-text-pink text-sm">后手</label>
                    </div>
                </div>
                
                <div class="difficulty-selector">
                    <label for="difficulty" class="neon-text-purple text-sm mb-2">AI难度</label>
                    <select id="difficulty" class="w-full mt-2">
                        <option value="easy">简单</option>
                        <option value="medium" selected>中等</option>
                        <option value="hard">困难</option>
                    </select>
                </div>
            </div>
            
            <button id="start-game-btn" class="neon-btn-green w-full py-2 mt-4">
                <i class="fas fa-play mr-2"></i>开始游戏
            </button>
        </div>
    </div>
    
    <!-- 游戏结束模态框 -->
    <div id="game-over-modal" class="modal">
        <div class="modal-content neon-border-blue">
            <h2 id="game-over-title" class="neon-text-blue mb-4">游戏结束</h2>
            <p id="game-over-message" class="mb-6">黑棋获胜!</p>
            <div class="flex justify-center">
                <button id="play-again-btn" class="neon-btn-blue mr-4">再玩一次</button>
                <button id="close-modal-btn" class="neon-btn-pink">关闭</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 游戏状态
            const gameState = {
                boardSize: 15,
                gridSize: 0,
                cellSize: 0,
                gameMode: 'pvc', // 'pvp' or 'pvc'
                currentPlayer: 'black', // 'black' or 'white'
                board: [],
                moves: [],
                gameOver: false,
                aiDifficulty: 'medium',
                playerFirst: true,
                winLine: null
            };
            
            // DOM元素
            const boardElement = document.querySelector('.board');
            const blackPlayerElement = document.getElementById('black-player');
            const whitePlayerElement = document.getElementById('white-player');
            const blackNameElement = document.getElementById('black-name');
            const whiteNameElement = document.getElementById('white-name');
            const gameStatusElement = document.getElementById('game-status');
            const newGameBtn = document.getElementById('new-game-btn');
            const undoBtn = document.getElementById('undo-btn');
            const settingsBtn = document.getElementById('settings-btn');
            const settingsModal = document.getElementById('settings-modal');
            const closeModalBtn = document.querySelector('.close-btn');
            const pvpModeBtn = document.getElementById('pvp-mode');
            const pvcModeBtn = document.getElementById('pvc-mode');
            const firstMoveRadio = document.getElementById('first-move');
            const secondMoveRadio = document.getElementById('second-move');
            const difficultySelect = document.getElementById('difficulty');
            const startGameBtn = document.getElementById('start-game-btn');
            const gameOverModal = document.getElementById('game-over-modal');
            const gameOverTitle = document.getElementById('game-over-title');
            const gameOverMessage = document.getElementById('game-over-message');
            const playAgainBtn = document.getElementById('play-again-btn');
            const closeModalBtn2 = document.getElementById('close-modal-btn');
            
            // 初始化游戏
            function initGame() {
                // 计算格子大小
                gameState.gridSize = gameState.boardSize - 1;
                gameState.cellSize = boardElement.offsetWidth / gameState.gridSize;
                
                // 清空棋盘
                boardElement.innerHTML = '';
                
                // 初始化棋盘数组
                gameState.board = Array(gameState.boardSize).fill().map(() => Array(gameState.boardSize).fill(null));
                gameState.moves = [];
                gameState.gameOver = false;
                gameState.winLine = null;
                
                // 绘制棋盘网格
                drawBoard();
                
                // 设置玩家信息
                updatePlayerInfo();
                
                // 如果是AI先手，让AI走第一步
                if (gameState.gameMode === 'pvc' && !gameState.playerFirst) {
                    setTimeout(() => {
                        makeAIMove();
                    }, 500);
                }
                
                // 更新游戏状态
                gameStatusElement.textContent = '游戏中';
                undoBtn.disabled = true;
            }
            
            // 绘制棋盘
            function drawBoard() {
                // 绘制网格线
                for (let i = 0; i < gameState.boardSize; i++) {
                    // 横线
                    const hLine = document.createElement('div');
                    hLine.className = 'grid-line';
                    hLine.style.width = `${boardElement.offsetWidth}px`;
                    hLine.style.height = '1px';
                    hLine.style.top = `${i * gameState.cellSize}px`;
                    hLine.style.left = '0';
                    boardElement.appendChild(hLine);
                    
                    // 竖线
                    const vLine = document.createElement('div');
                    vLine.className = 'grid-line';
                    vLine.style.width = '1px';
                    vLine.style.height = `${boardElement.offsetHeight}px`;
                    vLine.style.left = `${i * gameState.cellSize}px`;
                    vLine.style.top = '0';
                    boardElement.appendChild(vLine);
                }
                
                // 绘制星位点
                const starPoints = [
                    [3, 3], [3, 11], [7, 7], [11, 3], [11, 11]
                ];
                
                starPoints.forEach(point => {
                    const star = document.createElement('div');
                    star.className = 'piece';
                    star.style.width = `${gameState.cellSize * 0.2}px`;
                    star.style.height = `${gameState.cellSize * 0.2}px`;
                    star.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
                    star.style.left = `${point[0] * gameState.cellSize}px`;
                    star.style.top = `${point[1] * gameState.cellSize}px`;
                    boardElement.appendChild(star);
                });
            }
            
            // 绘制棋子
            function drawPiece(row, col, player) {
                const piece = document.createElement('div');
                piece.className = `piece ${player}-piece`;
                piece.style.width = `${gameState.cellSize * 0.9}px`;
                piece.style.height = `${gameState.cellSize * 0.9}px`;
                piece.style.left = `${col * gameState.cellSize}px`;
                piece.style.top = `${row * gameState.cellSize}px`;
                
                // 如果是最后一步，添加闪烁效果
                if (gameState.moves.length > 0) {
                    const lastMove = gameState.moves[gameState.moves.length - 1];
                    if (lastMove.row === row && lastMove.col === col) {
                        piece.classList.add('last-move');
                        piece.classList.add('neon');
                    }
                }
                
                boardElement.appendChild(piece);
            }
            
            // 处理点击棋盘事件
            function handleBoardClick(e) {
                if (gameState.gameOver) return;
                
                // 如果是AI回合且是PVE模式，忽略点击
                if (gameState.gameMode === 'pvc' && gameState.currentPlayer === 'white' && !gameState.playerFirst) return;
                if (gameState.gameMode === 'pvc' && gameState.currentPlayer === 'black' && gameState.playerFirst) return;
                
                const rect = boardElement.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // 计算点击的格子坐标
                const col = Math.round(x / gameState.cellSize);
                const row = Math.round(y / gameState.cellSize);
                
                // 检查是否有效移动
                if (isValidMove(row, col)) {
                    makeMove(row, col);
                    
                    // 如果是PVE模式且游戏未结束，让AI走下一步
                    if (gameState.gameMode === 'pvc' && !gameState.gameOver) {
                        setTimeout(() => {
                            makeAIMove();
                        }, 500);
                    }
                }
            }
            
            // 检查是否是有效移动
            function isValidMove(row, col) {
                // 检查是否在棋盘范围内
                if (row < 0 || row >= gameState.boardSize || col < 0 || col >= gameState.boardSize) {
                    return false;
                }
                
                // 检查该位置是否已有棋子
                return gameState.board[row][col] === null;
            }
            
            // 执行移动
            function makeMove(row, col) {
                // 更新棋盘数组
                gameState.board[row][col] = gameState.currentPlayer;
                
                // 记录移动
                gameState.moves.push({
                    row: row,
                    col: col,
                    player: gameState.currentPlayer
                });
                
                // 绘制棋子
                drawPiece(row, col, gameState.currentPlayer);
                
                // 检查是否获胜
                if (checkWin(row, col)) {
                    gameState.gameOver = true;
                    showWinLine(row, col);
                    showGameOver(`${gameState.currentPlayer === 'black' ? '黑棋' : '白棋'}获胜!`);
                    return;
                }
                
                // 检查是否平局
                if (gameState.moves.length === gameState.boardSize * gameState.boardSize) {
                    gameState.gameOver = true;
                    showGameOver('平局!');
                    return;
                }
                
                // 切换玩家
                gameState.currentPlayer = gameState.currentPlayer === 'black' ? 'white' : 'black';
                
                // 更新玩家信息
                updatePlayerInfo();
                
                // 启用悔棋按钮
                undoBtn.disabled = false;
            }
            
            // AI移动
            function makeAIMove() {
                if (gameState.gameOver) return;
                
                let row, col;
                
                // 根据难度选择AI策略
                switch (gameState.aiDifficulty) {
                    case 'easy':
                        // 简单AI: 随机走棋
                        [row, col] = makeRandomMove();
                        break;
                    case 'medium':
                        // 中等AI: 有一定策略
                        [row, col] = makeMediumMove();
                        break;
                    case 'hard':
                        // 困难AI: 使用更复杂的策略
                        [row, col] = makeHardMove();
                        break;
                    default:
                        [row, col] = makeMediumMove();
                }
                
                makeMove(row, col);
            }
            
            // 随机走棋
            function makeRandomMove() {
                let row, col;
                do {
                    row = Math.floor(Math.random() * gameState.boardSize);
                    col = Math.floor(Math.random() * gameState.boardSize);
                } while (!isValidMove(row, col));
                
                return [row, col];
            }
            
            // 中等AI走棋
            function makeMediumMove() {
                // 首先检查是否有可以立即获胜的走法
                for (let i = 0; i < gameState.boardSize; i++) {
                    for (let j = 0; j < gameState.boardSize; j++) {
                        if (isValidMove(i, j)) {
                            gameState.board[i][j] = 'white';
                            if (checkWin(i, j)) {
                                gameState.board[i][j] = null;
                                return [i, j];
                            }
                            gameState.board[i][j] = null;
                        }
                    }
                }
                
                // 检查是否需要阻止对手获胜
                for (let i = 0; i < gameState.boardSize; i++) {
                    for (let j = 0; j < gameState.boardSize; j++) {
                        if (isValidMove(i, j)) {
                            gameState.board[i][j] = 'black';
                            if (checkWin(i, j)) {
                                gameState.board[i][j] = null;
                                return [i, j];
                            }
                            gameState.board[i][j] = null;
                        }
                    }
                }
                
                // 如果没有立即获胜或阻止的走法，尝试在中心区域走棋
                const center = Math.floor(gameState.boardSize / 2);
                if (isValidMove(center, center)) {
                    return [center, center];
                }
                
                // 否则随机走棋
                return makeRandomMove();
            }
            
            // 困难AI走棋
            function makeHardMove() {
                // 首先检查是否有可以立即获胜的走法
                for (let i = 0; i < gameState.boardSize; i++) {
                    for (let j = 0; j < gameState.boardSize; j++) {
                        if (isValidMove(i, j)) {
                            gameState.board[i][j] = 'white';
                            if (checkWin(i, j)) {
                                gameState.board[i][j] = null;
                                return [i, j];
                            }
                            gameState.board[i][j] = null;
                        }
                    }
                }
                
                // 检查是否需要阻止对手获胜
                for (let i = 0; i < gameState.boardSize; i++) {
                    for (let j = 0; j < gameState.boardSize; j++) {
                        if (isValidMove(i, j)) {
                            gameState.board[i][j] = 'black';
                            if (checkWin(i, j)) {
                                gameState.board[i][j] = null;
                                return [i, j];
                            }
                            gameState.board[i][j] = null;
                        }
                    }
                }
                
                // 尝试创建或扩展自己的连线
                const bestMove = findBestMove();
                if (bestMove) {
                    return bestMove;
                }
                
                // 否则使用中等AI的策略
                return makeMediumMove();
            }
            
            // 评估棋盘并找到最佳移动
            function findBestMove() {
                let bestScore = -Infinity;
                let bestMove = null;
                
                for (let i = 0; i < gameState.boardSize; i++) {
                    for (let j = 0; j < gameState.boardSize; j++) {
                        if (isValidMove(i, j)) {
                            // 尝试在此位置下子
                            gameState.board[i][j] = 'white';
                            
                            // 评估这个位置
                            const score = evaluatePosition(i, j, 'white');
                            
                            // 撤销移动
                            gameState.board[i][j] = null;
                            
                            if (score > bestScore) {
                                bestScore = score;
                                bestMove = [i, j];
                            }
                        }
                    }
                }
                
                return bestMove;
            }
            
            // 评估位置得分
            function evaluatePosition(row, col, player) {
                let score = 0;
                
                // 检查四个方向
                const directions = [
                    [0, 1],   // 水平
                    [1, 0],   // 垂直
                    [1, 1],   // 对角线
                    [1, -1]   // 反对角线
                ];
                
                directions.forEach(([dx, dy]) => {
                    let count = 1; // 当前位置已经有一个子
                    let openEnds = 0;
                    
                    // 向一个方向检查
                    let r = row + dx;
                    let c = col + dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        r += dx;
                        c += dy;
                    }
                    
                    // 检查是否开放
                    if (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === null) {
                        openEnds++;
                    }
                    
                    // 向另一个方向检查
                    r = row - dx;
                    c = col - dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        r -= dx;
                        c -= dy;
                    }
                    
                    // 检查是否开放
                    if (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === null) {
                        openEnds++;
                    }
                    
                    // 根据连子数和开放端评分
                    if (count >= 5) {
                        score += 100000; // 五连珠
                    } else if (count === 4) {
                        if (openEnds === 2) score += 10000; // 活四
                        else if (openEnds === 1) score += 1000; // 冲四
                    } else if (count === 3) {
                        if (openEnds === 2) score += 500; // 活三
                        else if (openEnds === 1) score += 100; // 冲三
                    } else if (count === 2) {
                        if (openEnds === 2) score += 50; // 活二
                        else if (openEnds === 1) score += 10; // 冲二
                    }
                });
                
                return score;
            }
            
            // 检查是否获胜
            function checkWin(row, col) {
                const player = gameState.board[row][col];
                const directions = [
                    [0, 1],   // 水平
                    [1, 0],   // 垂直
                    [1, 1],   // 对角线
                    [1, -1]   // 反对角线
                ];
                
                for (const [dx, dy] of directions) {
                    let count = 1;
                    
                    // 向一个方向检查
                    let r = row + dx;
                    let c = col + dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        r += dx;
                        c += dy;
                    }
                    
                    // 向另一个方向检查
                    r = row - dx;
                    c = col - dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        r -= dx;
                        c -= dy;
                    }
                    
                    if (count >= 5) {
                        return true;
                    }
                }
                
                return false;
            }
            
            // 显示获胜线
            function showWinLine(row, col) {
                const player = gameState.board[row][col];
                const directions = [
                    [0, 1],   // 水平
                    [1, 0],   // 垂直
                    [1, 1],   // 对角线
                    [1, -1]   // 反对角线
                ];
                
                for (const [dx, dy] of directions) {
                    let count = 1;
                    
                    // 向一个方向检查
                    let r = row + dx;
                    let c = col + dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        r += dx;
                        c += dy;
                    }
                    
                    // 向另一个方向检查
                    let startR = row;
                    let startC = col;
                    r = row - dx;
                    c = col - dy;
                    while (r >= 0 && r < gameState.boardSize && c >= 0 && c < gameState.boardSize && gameState.board[r][c] === player) {
                        count++;
                        startR = r;
                        startC = c;
                        r -= dx;
                        c -= dy;
                    }
                    
                    if (count >= 5) {
                        // 创建获胜线
                        const line = document.createElement('div');
                        line.className = 'win-line';
                        
                        // 计算线的长度和角度
                        const endR = startR + (count - 1) * dx;
                        const endC = startC + (count - 1) * dy;
                        
                        const startX = startC * gameState.cellSize;
                        const startY = startR * gameState.cellSize;
                        const endX = endC * gameState.cellSize;
                        const endY = endR * gameState.cellSize;
                        
                        const length = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
                        const angle = Math.atan2(endY - startY, endX - startX) * 180 / Math.PI;
                        
                        line.style.width = `${length}px`;
                        line.style.height = '4px';
                        line.style.left = `${startX}px`;
                        line.style.top = `${startY}px`;
                        line.style.transform = `rotate(${angle}deg)`;
                        
                        boardElement.appendChild(line);
                        gameState.winLine = line;
                        return;
                    }
                }
            }
            
            // 悔棋
            function undoMove() {
                if (gameState.moves.length === 0 || gameState.gameOver) return;
                
                // 移除最后一步
                const lastMove = gameState.moves.pop();
                gameState.board[lastMove.row][lastMove.col] = null;
                
                // 重新绘制棋盘
                boardElement.querySelectorAll('.piece').forEach(piece => piece.remove());
                
                // 重新绘制所有棋子
                gameState.moves.forEach(move => {
                    drawPiece(move.row, move.col, move.player);
                });
                
                // 切换当前玩家
                gameState.currentPlayer = gameState.currentPlayer === 'black' ? 'white' : 'black';
                
                // 更新玩家信息
                updatePlayerInfo();
                
                // 如果悔棋后没有步数，禁用悔棋按钮
                undoBtn.disabled = gameState.moves.length === 0;
                
                // 移除获胜线
                if (gameState.winLine) {
                    gameState.winLine.remove();
                    gameState.winLine = null;
                }
                
                // 重置游戏结束状态
                gameState.gameOver = false;
                gameStatusElement.textContent = '游戏中';
            }
            
            // 更新玩家信息
            function updatePlayerInfo() {
                // 重置所有玩家状态
                blackPlayerElement.classList.remove('active-player');
                whitePlayerElement.classList.remove('active-player');
                whitePlayerElement.classList.remove('active-player', 'white');
                
                // 设置当前活跃玩家
                if (gameState.currentPlayer === 'black') {
                    blackPlayerElement.classList.add('active-player');
                } else {
                    whitePlayerElement.classList.add('active-player', 'white');
                }
                
                // 更新玩家名称
                if (gameState.gameMode === 'pvp') {
                    blackNameElement.textContent = '玩家1';
                    whiteNameElement.textContent = '玩家2';
                } else {
                    blackNameElement.textContent = gameState.playerFirst ? '玩家' : 'AI';
                    whiteNameElement.textContent = gameState.playerFirst ? 'AI' : '玩家';
                }
            }
            
            // 显示游戏结束模态框
            function showGameOver(message) {
                gameOverTitle.textContent = '游戏结束';
                gameOverMessage.textContent = message;
                gameOverModal.style.display = 'flex';
                gameStatusElement.textContent = '游戏结束';
            }
            
            // 事件监听器
            boardElement.addEventListener('click', handleBoardClick);
            newGameBtn.addEventListener('click', initGame);
            undoBtn.addEventListener('click', undoMove);
            settingsBtn.addEventListener('click', () => {
                settingsModal.style.display = 'flex';
            });
            closeModalBtn.addEventListener('click', () => {
                settingsModal.style.display = 'none';
            });
            pvpModeBtn.addEventListener('click', () => {
                gameState.gameMode = 'pvp';
                pvpModeBtn.classList.add('neon-btn-blue');
                pvpModeBtn.classList.remove('neon-btn-pink');
                pvcModeBtn.classList.remove('neon-btn-blue');
                pvcModeBtn.classList.add('neon-btn-pink');
                document.getElementById('ai-settings').style.display = 'none';
            });
            pvcModeBtn.addEventListener('click', () => {
                gameState.gameMode = 'pvc';
                pvcModeBtn.classList.add('neon-btn-pink');
                pvcModeBtn.classList.remove('neon-btn-blue');
                pvpModeBtn.classList.remove('neon-btn-pink');
                pvpModeBtn.classList.add('neon-btn-blue');
                document.getElementById('ai-settings').style.display = 'block';
            });
            startGameBtn.addEventListener('click', () => {
                if (gameState.gameMode === 'pvc') {
                    gameState.playerFirst = firstMoveRadio.checked;
                    gameState.aiDifficulty = difficultySelect.value;
                }
                settingsModal.style.display = 'none';
                initGame();
            });
            playAgainBtn.addEventListener('click', () => {
                gameOverModal.style.display = 'none';
                initGame();
            });
            closeModalBtn2.addEventListener('click', () => {
                gameOverModal.style.display = 'none';
            });
            
            // 初始化设置
            pvpModeBtn.classList.add('neon-btn-blue');
            pvcModeBtn.classList.add('neon-btn-pink');
            document.getElementById('ai-settings').style.display = 'none';
            
            // 开始游戏
            initGame();
        });
    </script>
<p style="border-radius: 8px; text-align: center; font-size: 12px; color: #fff; margin-top: 16px;position: fixed; left: 8px; bottom: 8px; z-index: 10; background: rgba(0, 0, 0, 0.8); padding: 4px 8px;">Made with <img src="https://enzostvs-deepsite.hf.space/logo.svg" alt="DeepSite Logo" style="width: 16px; height: 16px; vertical-align: middle;display:inline-block;margin-right:3px;filter:brightness(0) invert(1);"><a href="https://enzostvs-deepsite.hf.space" style="color: #fff;text-decoration: underline;" target="_blank" >DeepSite</a> - 🧬 <a href="https://enzostvs-deepsite.hf.space?remix=KuRRe8/neon-gobang" style="color: #fff;text-decoration: underline;" target="_blank" >Remix</a></p></body>
</html>
